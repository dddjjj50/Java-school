■最初のおまじない
package chap01;
public class Sample01 {		
	public static void main(String[] args) {
		
	}
}



■標準出力
System.out.print(表示させたい文字列);
System.out.println(表示させたい文字列);  //えるえぬｌｎを入れると（）内を表示させたあとに改行
System.out.print(表示させたい文字列"\n");  //C言語と同じように\nでも改行可能
syso　ctrlスペースですぐ出せる

※printfみたいなのも使える。
System.out.print(("名前: %s, 年齢: %d, 身長: %.2f cm\n", "田中", 25, 175.5);



■改行
System.out.print();  //エラーになる
System.out.println();  //エラーにならない！改行だけできる。

■標準入力
System.in.read();
args)のあとにthrows java.io.IOException{

■文字列のデータ型
データ型　　　　　変更可否　スレッドセーフ　速度
String　　　　　 変更不可　　安全　　　　　高速
StringBuilder　　変更可　　 安全じゃない　高速
StringBuffer　　 変更可　　 安全　　　　　遅め

■final変数。代入が1度しかできない。2度目以降でに代入をしようとするとエラーになる。
final データ型 変数名（大文字）;
変数名＝初期値;
C言語でいうconst。
■
同じようなの作りたいときは別名保存→クラス名を変えるの忘れない

■関数のとりこみ
int input;
System.out.println("出力の開始");
System.out.print("半角数字を入力してください　：　");
input = System.in.read();
System.out.println("入力した数字は"+input+"です。");

※しかし上記では、1の文字コード「49」が出力されてしまう。
そこでCharacter.digitを使う。

Character.digit(変数名,10)
その変数に入ってる値を10進数として理解してください。
（16進数なら16）
文字コードにできなければ-1になる

input = System.in.read();
input = Character.digit(input,10);	//10進数に変換
//input = Character.digit(System.in.read(),10); でも上記2段と同じ意味。省略ができる


■コンパイルエラーと実行エラー
コンパイルエラー：ソースコードの間違い。文法やスペル。変数名を間違えた、必要な記述が受けた、カッコがおかしい
実行エラー：文法に誤りはないが動作に問題がある。出た値が範囲外とか。

■Math.random()　0.000･･･～0.999…までのdouble型の乱数値を自動的に発生させる。
・0～9までの乱数の値を代入する
int i;
i=(int)(Math.random()*10);

Math.random()*11-5　-5～5まで出る




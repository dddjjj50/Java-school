■最初のおまじない
package chap01;
public class Sample01 {		
	public static void main(String[] args) {
	}
}



■標準出力
System.out.print(表示させたい文字列);
System.out.println(表示させたい文字列);  //えるえぬｌｎを入れると（）内を表示させたあとに改行
System.out.print(表示させたい文字列"\n");  //C言語と同じように\nでも改行可能
syso　ctrlスペースですぐ出せる

※printfみたいなのも使える。
System.out.print(("名前: %s, 年齢: %d, 身長: %.2f cm\n", "田中", 25, 175.5);

■改行
System.out.print();  //エラーになる
System.out.println();  //エラーにならない！改行だけできる。

■標準入力
System.in.read();
args)のあとにthrows java.io.IOException{
- System.in.read(); は 1バイト (整数値) の入力を読み込む
- 例えば 'A' を入力すると その ASCII コード (65) が取得される
- System.in.read() の戻り値は int 型なので、変数に格納できる！
int ch = System.in.read(); // キーボード入力を1文字読み込む


■文字列のデータ型
データ型　　　　　変更可否　スレッドセーフ　速度
String　　　　　 変更不可　　安全　　　　　高速
StringBuilder　　変更可　　 安全じゃない　高速
StringBuffer　　 変更可　　 安全　　　　　遅め

■指定子
double　Cでは%lfだけどJavaでは%f

■final変数。代入が1度しかできない。2度目以降でに代入をしようとするとエラーになる。
final データ型 変数名（大文字）;
変数名＝初期値;
C言語でいうconst。

■同じようなの作りたいときは別名保存→クラス名を変えるの忘れない

■関数のとりこみ
int input;
System.out.println("出力の開始");
System.out.print("半角数字を入力してください　：　");
input = System.in.read();
System.out.println("入力した数字は"+input+"です。");

※しかし上記では、1の文字コード「49」が出力されてしまう。
そこでCharacter.digitを使う。

Character.digit(変数名,10)
その変数に入ってる値を10進数として理解してください。
（16進数なら16）
文字コードにできなければ-1になる

input = System.in.read();
input = Character.digit(input,10);	//10進数に変換
//input = Character.digit(System.in.read(),10); でも上記2段と同じ意味。省略ができる


■コンパイルエラーと実行エラー
コンパイルエラー：ソースコードの間違い。文法やスペル。変数名を間違えた、必要な記述が受けた、カッコがおかしい
実行エラー：文法に誤りはないが動作に問題がある。出た値が範囲外とか。

■Math.random()　0.0以上 1.0未満（0 <= Math.random() < 1）のdouble型の乱数値を自動的に発生させる。
・0～9までの乱数の値を代入する
int i;
i=(int)(Math.random()*10);

■フローチャート
プログラム構文とかは書かない。お客さんとの説明で使うから

Math.random()*11-5　-5～5まで出る

■if文、else ifで終わらすとエラーになる可能性ある
if文の条件が複数になるときは && もしくは ||

■A.equals(B) AとBの内容が同一である。
A==B　メモリのアドレスが同じって意味になる
AとBは順不同

■Switch（条件）｛
case　0：　//コロン
　　　処理；
　　　brreak；
…
default：  //必須ではない。条件外はなにも処理されなくなる。が、わかりやすくするため記述したほうが〇
　　　処理；
　　　brreak；
｝
条件の変数に使えるのは
・byte
・char
・short
・int
・String

14以降なら、case 1,2,...:って書いてもOK
break忘れると処理が続いて行ってしまう。

■break　実行している風呂億（forなど）から強制的に処理を終了させる。

■continue　実行している繰り返し文まで強制的に処理を移動させる。
・for文の場合　処理が更新式へ移動する
・while文、do～while文の場合　条件式へ移行する

■配列宣言
Javaでは int num[5]; ではなく、 
・int[] num = new int[5]; 
・int num[] = new int[5]; 
左辺の[]は空白に、右辺の[]に要素数を記入

■データ名.lengthで最初の配列宣言の要素数を変更するだけで、あとのコードを変えなくてよくなる。
ex)　for(int i=0;i<aaa.length;i++) {

■拡張for文
for (要素数のintを宣言：配列）
ex) int num[5];
for(int i:num){
	System.out.println(i)
}
※0からしか参照できない。逆とかできない。

■最大値、最小値。
Math.max(引数1,引数2）
Math.min(引数1,引数2）
引数2こまでなので、3つやりたいときはMath.max（引数1,Math.max(引数2,引数3))て使う。

■data.length=繰り返しと配列のあわせわざで使う

■getAbsolutePath()メソッド　ファイルの絶対パスを得る
isFile()メソッド　ファイルかどうか判断する
isDirectory()メソッド　ディレクトリーかどうか判断する

■ファイル入出力ストリームを使う場合には以下の手順で行う
①ストリームをオープン（定義）する
②データの入出力（読み書き）をする
③ストリームをクローズ（終了）する

■flush();　フラッシュ処理を行う
close();　ストリームのクローズとフラッシュ処理を行う
write();　ファイルへの入力を行う
read();　ファイルからの出力を行う


ストリームとは？
ストリームとは、データの流れ を管理する仕組みです。ファイルの読み書きやネットワーク通信では、データは一気に扱われるのではなく、流れるように順次処理 されます。この 流れるデータの経路 を「ストリーム」と呼びます。
例えば、ファイルを開いてデータを書き込む場合、ストリームを通じてデータが 少しずつ 書き込まれます。これにより、メモリの消費を抑えながら効率的にデータを処理できます。
フラッシュ処理とは？
flush(); は ストリームのバッファ内のデータを即座に書き込む 処理のことです。
バッファってなに？
バッファとは、一時的にデータを溜めておく領域です。ファイルにデータを書き込む際、データを すぐにディスクへ保存せず、メモリ上のバッファに一時的に保持します。これにより、効率的にデータを書き込めます。しかし、バッファ内のデータが すぐに反映されない こともあります。


■length()格納する文字列の文字数を返す
substring()
compareTo()
toUpperCase()
toLowerCase()
trim()
split()

■
Localeクラスが含まれているパッケージ：java.utilパッケージ
数値をフォーマットする；NumberFormatクラス
日時を扱うクラス：Calendarクラス
日付をフォーマットする：DateForamatクラス
数値と日付をフォーマットするクラスが含まれているパッケージ：java.textパッケージ

■ArrayListパッケージ
・java.utilパッケージに含まれている
・コレクションのサイズ（要素数）は自由に変えられる。
・

■例外
コンパイルエラーじゃないけどエラーになるようなコードのとき。
try{
	例外発生するかもな処理
}catch(例外クラス型　引数名){
	例外発生時の処理
}finally{
	例外の発生有無にかかわらず行う処理
}
・catch(例外クラス型　引数名)の部分は複数定義できる。
　　いちいちcatchかいてもいいし
		}catch(例外クラス型　引数名){
		}catch(例外クラス型　引数名){
　　｜使ってもいい。
		}catch(例外クラス型　引数名|例外クラス型　引数名|例外クラス型　引数名){
・try catchじゃなくて、throwsを使ってもいい。
	「修飾子　戻り値の型　メソッド名（引数リスト） throws 例外クラス名｛｝」
	「public void array_check(int i) throws ArrayIndexOutOfBoundsException{}」みたいに。
